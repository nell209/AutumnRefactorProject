// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"
)

type Branch struct {
	ID             string          `json:"ID"`
	CompanyUID     string          `json:"companyUid"`
	Name           *string         `json:"name"`
	UpdatedAt      *time.Time      `json:"updatedAt"`
	CreatedAt      *time.Time      `json:"createdAt"`
	TaskPriorities []*TaskPriority `json:"taskPriorities"`
	DefaultKanban  *string         `json:"defaultKanban"`
	PrairieMode    *bool           `json:"prairieMode"`
	KelownaMode    *bool           `json:"kelownaMode"`
}

type BranchInput struct {
	Name string `json:"name"`
}

type CompaniesConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*CompanysEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type Company struct {
	ID            string     `json:"ID"`
	Name          string     `json:"name"`
	Email         string     `json:"email"`
	Address       string     `json:"address"`
	City          string     `json:"city"`
	Province      string     `json:"province"`
	Country       string     `json:"country"`
	UpdatedAt     *time.Time `json:"updatedAt"`
	CreatedAt     *time.Time `json:"createdAt"`
	PaymentStatus string     `json:"paymentStatus"`
	PaymentMethod *string    `json:"paymentMethod"`
}

type CompanyInput struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Address  string `json:"address"`
	City     string `json:"city"`
	Province string `json:"province"`
	Country  string `json:"country"`
}

type CompanysEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Company `json:"node"`
}

type KanbanFilter struct {
	ID      string          `json:"ID"`
	Name    string          `json:"name"`
	Columns []*TaskPriority `json:"columns"`
}

type PageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

type Position struct {
	Pos       *float64 `json:"pos"`
	ColumnUID *string  `json:"columnUid"`
}

type Project struct {
	ID          *string    `json:"ID"`
	Name        *string    `json:"name"`
	Description *string    `json:"description"`
	Deadline    *time.Time `json:"deadline"`
	UpdatedAt   *time.Time `json:"updatedAt"`
	CreatedAt   *time.Time `json:"createdAt"`
	CreatedBy   *User      `json:"createdBy"`
	DeletedAt   *time.Time `json:"deletedAt"`
	DeletedBy   *User      `json:"deletedBy"`
	SharedToAll bool       `json:"sharedToAll"`
	Tasks       []*Task    `json:"tasks"`
	Users       []*User    `json:"users"`
}

type ProjectConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*ProjectEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type ProjectEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Project `json:"node"`
}

type ProjectInput struct {
	Name        string     `json:"name"`
	Deadline    *time.Time `json:"deadline"`
	Description *string    `json:"description"`
}

type ProjectSearchOptions struct {
	Search  *string `json:"search"`
	Order   *string `json:"order"`
	OrderBy *string `json:"orderBy"`
	Type    *string `json:"type"`
}

type Response struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

type SearchOptions struct {
	StartedBefore     *string  `json:"startedBefore"`
	StartedAfter      *string  `json:"startedAfter"`
	CompletedBefore   *string  `json:"completedBefore"`
	CompletedAfter    *string  `json:"completedAfter"`
	ProjectUids       []string `json:"projectUids"`
	UserUids          []string `json:"userUids"`
	TeamUids          []string `json:"teamUids"`
	WorkRoleUids      []string `json:"workRoleUids"`
	ColumnUids        []string `json:"columnUids"`
	IncludeUnassigned *bool    `json:"includeUnassigned"`
	Status            *string  `json:"status"`
}

type Task struct {
	ID                 string              `json:"ID"`
	Name               *string             `json:"name"`
	Description        string              `json:"description"`
	ProjectUID         string              `json:"projectUid"`
	Project            *Project            `json:"project"`
	CompletionEstimate *float64            `json:"completionEstimate"`
	Urgent             bool                `json:"urgent"`
	SharedToAll        bool                `json:"sharedToAll"`
	UpdatedAt          *time.Time          `json:"updatedAt"`
	CreatedAt          *time.Time          `json:"createdAt"`
	StartedAt          *time.Time          `json:"startedAt"`
	StartedBy          *User               `json:"startedBy"`
	CompletedAt        *time.Time          `json:"completedAt"`
	CompletedBy        *User               `json:"completedBy"`
	Status             *string             `json:"status"`
	Users              []*User             `json:"users"`
	Prerequisites      []*TaskPrerequisite `json:"prerequisites"`
	Postrequisites     []*Task             `json:"postrequisites"`
	Position           *Position           `json:"position"`
	Priority           *string             `json:"priority"`
	PriorityPosition   *float64            `json:"priorityPosition"`
	Date               *time.Time          `json:"date"`
}

type TaskFilter struct {
	ID            string         `json:"ID"`
	Name          string         `json:"name"`
	SearchOptions *SearchOptions `json:"searchOptions"`
}

type TaskFilterConnection struct {
	TotalCount int               `json:"totalCount"`
	Edges      []*TaskFilterEdge `json:"edges"`
	PageInfo   *PageInfo         `json:"pageInfo"`
}

type TaskFilterEdge struct {
	Cursor string      `json:"cursor"`
	Node   *TaskFilter `json:"node"`
}

type TaskFilterInput struct {
	Name          string             `json:"name"`
	SearchOptions *TaskSearchOptions `json:"searchOptions"`
}

type TaskInput struct {
	ProjectID          string     `json:"projectID"`
	Name               string     `json:"name"`
	Description        *string    `json:"description"`
	Priority           *string    `json:"priority"`
	Status             *string    `json:"status"`
	CompletionEstimate *float64   `json:"completionEstimate"`
	Users              []string   `json:"users"`
	Teams              []string   `json:"teams"`
	Documents          []string   `json:"documents"`
	WorkRoles          []string   `json:"workRoles"`
	SharedToAll        bool       `json:"sharedToAll"`
	Date               *time.Time `json:"date"`
}

type TaskPrerequisite struct {
	Task *Task   `json:"task"`
	Type *string `json:"type"`
}

type TaskPriority struct {
	ID                string  `json:"ID"`
	Description       string  `json:"description"`
	Position          float64 `json:"position"`
	Color             string  `json:"color"`
	UnPositionedCount int     `json:"unPositionedCount"`
}

type TaskPriorityInput struct {
	Description string `json:"description"`
	Color       string `json:"color"`
}

type TaskPriorityUpdate struct {
	ID          string  `json:"ID"`
	Description string  `json:"description"`
	Color       string  `json:"color"`
	Position    float64 `json:"position"`
}

type TaskSearchOptions struct {
	StartedBefore     *time.Time `json:"startedBefore"`
	StartedAfter      *time.Time `json:"startedAfter"`
	CompletedBefore   *time.Time `json:"completedBefore"`
	CompletedAfter    *time.Time `json:"completedAfter"`
	ProjectUids       []string   `json:"projectUids"`
	UserUids          []string   `json:"userUids"`
	TeamUids          []string   `json:"teamUids"`
	WorkRoleUids      []string   `json:"workRoleUids"`
	ColumnIDs         []string   `json:"columnIDs"`
	IncludeUnassigned *bool      `json:"includeUnassigned"`
	Status            *string    `json:"status"`
	Search            *string    `json:"search"`
}

type TaskUpdate struct {
	Name               string   `json:"name"`
	Description        *string  `json:"description"`
	Priority           *string  `json:"priority"`
	Status             *string  `json:"status"`
	CompletionEstimate *float64 `json:"completionEstimate"`
}

type TasksConnection struct {
	TotalCount int          `json:"totalCount"`
	Edges      []*TasksEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

type TasksEdge struct {
	Cursor string `json:"cursor"`
	Node   *Task  `json:"node"`
}

type User struct {
	ID               *string    `json:"ID"`
	FirstName        *string    `json:"firstName"`
	LastName         *string    `json:"lastName"`
	Email            string     `json:"email"`
	Branches         []*Branch  `json:"branches"`
	Password         *string    `json:"password"`
	UpdatedAt        *time.Time `json:"updatedAt"`
	CreatedAt        *time.Time `json:"createdAt"`
	Tasks            []*Task    `json:"tasks"`
	DefaultFilterUID *string    `json:"defaultFilterUid"`
}

type UserInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

type UserUpdate struct {
	FirstName  string `json:"firstName"`
	LastName   string `json:"lastName"`
	Email      string `json:"email"`
	ProfileURL string `json:"profileURL"`
	ProfileID  string `json:"profileID"`
}
