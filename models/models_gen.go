// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"time"
)

type Branch struct {
	ID        string     `json:"id" gorm:"type:uuid;default:uuid_generate_v4()"`
	Name      string     `json:"name"`
	CompanyID string     `json:"companyId" gorm:"type:uuid"`
	UpdatedAt time.Time  `json:"updatedAt"`
	CreatedAt time.Time  `json:"createdAt"`
	Columns   []*Column  `json:"columns"`
	Users     []*User    `json:"users"`
	Projects  []*Project `json:"projects"`
}

type BranchInput struct {
	Name string `json:"name"`
}

type Column struct {
	ID       string  `json:"id" gorm:"type:uuid;default:uuid_generate_v4()"`
	BranchID string  `json:"branchId"`
	Name     string  `json:"name"`
	Position int     `json:"position"`
	Color    *string `json:"color"`
	Tasks    []*Task `json:"tasks"`
}

type ColumnInput struct {
	Description string  `json:"description"`
	Color       *string `json:"color"`
}

type ColumnUpdate struct {
	ID          string  `json:"id"`
	Description string  `json:"description"`
	Color       string  `json:"color"`
	Position    float64 `json:"position"`
}

type Company struct {
	ID            string    `json:"id" gorm:"type:uuid;default:uuid_generate_v4()"`
	Name          string    `json:"name"`
	Branches      []*Branch `json:"branches"`
	UpdatedAt     time.Time `json:"updatedAt"`
	CreatedAt     time.Time `json:"createdAt"`
	PaymentStatus string    `json:"paymentStatus"`
	PaymentMethod *string   `json:"paymentMethod"`
}

type CompanyInput struct {
	Name string `json:"name"`
}

type KanbanFilter struct {
	ID      string    `json:"id" gorm:"type:uuid;default:uuid_generate_v4()"`
	Name    string    `json:"name"`
	Columns []*Column `json:"columns" gorm:"many2many:kanban_filter_columns"`
}

type PageInfo struct {
	StartCursor *string `json:"startCursor"`
	EndCursor   *string `json:"endCursor"`
	HasNextPage bool    `json:"hasNextPage"`
}

type Project struct {
	ID          string     `json:"id" gorm:"type:uuid;default:uuid_generate_v4()"`
	Name        string     `json:"name"`
	Description *string    `json:"description"`
	Deadline    *time.Time `json:"deadline"`
	BranchID    string     `json:"branchId"`
	UpdatedAt   time.Time  `json:"updatedAt"`
	CreatedAt   time.Time  `json:"createdAt"`
	DeletedAt   *time.Time `json:"deletedAt"`
	Tasks       []*Task    `json:"tasks"`
}

type ProjectConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*ProjectEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type ProjectEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Project `json:"node"`
}

type ProjectInput struct {
	Name        string     `json:"name"`
	Deadline    *time.Time `json:"deadline"`
	Description *string    `json:"description"`
}

type ProjectSearchOptions struct {
	Search  *string `json:"search"`
	Order   *string `json:"order"`
	OrderBy *string `json:"orderBy"`
	Type    *string `json:"type"`
}

type Response struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

type SearchOptions struct {
	StartedBefore     *string  `json:"startedBefore"`
	StartedAfter      *string  `json:"startedAfter"`
	CompletedBefore   *string  `json:"completedBefore"`
	CompletedAfter    *string  `json:"completedAfter"`
	ProjectIds        []string `json:"projectIds"`
	UserIds           []string `json:"userIds"`
	ColumnIds         []string `json:"columnIds"`
	IncludeUnassigned *bool    `json:"includeUnassigned"`
	Status            *string  `json:"status"`
}

// Users and Pre-Requisite Arrays are Nullable -> Null if they haven't been set; However Items in the Array are non-nullable/guaranteed
type Task struct {
	ID             string     `json:"id" gorm:"type:uuid;default:uuid_generate_v4()"`
	Name           string     `json:"name"`
	Description    *string    `json:"description"`
	ProjectID      *string    `json:"projectId"`
	Project        *Project   `json:"project"`
	Urgent         bool       `json:"urgent"`
	UpdatedAt      time.Time  `json:"updatedAt"`
	CreatedAt      time.Time  `json:"createdAt"`
	StartedAt      *time.Time `json:"startedAt"`
	CompletedAt    *time.Time `json:"completedAt"`
	Users          []*User    `json:"users" gorm:"many2many:task_users"`
	Prerequisites  []*Task    `json:"prerequisites" gorm:"many2many:prerequisite_tasks"`
	ColumnPosition *int       `json:"columnPosition"`
	ColumnID       *string    `json:"columnId"`
	Date           *time.Time `json:"date"`
}

type TaskFilter struct {
	ID            string         `json:"id" gorm:"type:uuid;default:uuid_generate_v4()"`
	Name          string         `json:"name"`
	SearchOptions *SearchOptions `json:"searchOptions"`
}

type TaskFilterConnection struct {
	TotalCount int               `json:"totalCount"`
	Edges      []*TaskFilterEdge `json:"edges"`
	PageInfo   *PageInfo         `json:"pageInfo"`
}

type TaskFilterEdge struct {
	Cursor string      `json:"cursor"`
	Node   *TaskFilter `json:"node"`
}

type TaskFilterInput struct {
	Name          string             `json:"name"`
	SearchOptions *TaskSearchOptions `json:"searchOptions"`
}

type TaskSearchOptions struct {
	StartedBefore     *time.Time `json:"startedBefore"`
	StartedAfter      *time.Time `json:"startedAfter"`
	CompletedBefore   *time.Time `json:"completedBefore"`
	CompletedAfter    *time.Time `json:"completedAfter"`
	ProjectIds        []string   `json:"projectIds"`
	UserIds           []string   `json:"userIds"`
	ColumnIds         []string   `json:"columnIds"`
	IncludeUnassigned *bool      `json:"includeUnassigned"`
	Status            *string    `json:"status"`
	Search            *string    `json:"search"`
}

type User struct {
	ID        string    `json:"Id" gorm:"type:uuid;default:uuid_generate_v4()"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	Email     string    `json:"email"`
	Password  *string   `json:"password"`
	UpdatedAt time.Time `json:"updatedAt"`
	CreatedAt time.Time `json:"createdAt"`
	Tasks     []*Task   `json:"tasks" gorm:"many2many:user_tasks"`
	BranchID  string    `json:"branchId"`
	Role      *string   `json:"role"`
}
